name: 'Signing event'
description: 'TUF-on-CI Signing event management'

# This action is called from signing-event workflow, which is dispatched in multiple ways
# depending on the type of token provided in inputs.
#
# 1. create-signing-events action creates a new signing event branch
#     * When using a custom token this triggers push event handler
#     * When using the default GitHub token the action calls createWorkflowDispatch()
# 2. A signer pushes artifact changes to a signing event branch
#     * This triggers push event handler
# 3. This action (signing-event) makes a metadata change in update_targets step as a result of an artifact change
#     * When using a custom token this triggers push event handler
#     * When using the default GitHub token the action calls createWorkflowDispatch()
#
# Cases 1 & 3 lead to status step running. Case 2 leads to skipping status step, but
# triggering case 3 immediately afterwards.

inputs:
  token:
    description: 'GitHub token'
    required: true
  base-branch:
    description: 'Base branch name (defaults to auto-detected default branch or "main")'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        token: ${{ inputs.token }}
        fetch-depth: 0
        persist-credentials: true

    - id: detect-base-branch
      env:
        INPUT_BASE_BRANCH: ${{ inputs.base-branch }}
      run: |
        if [ -n "$INPUT_BASE_BRANCH" ]; then
          echo "base-branch=$INPUT_BASE_BRANCH" >> $GITHUB_OUTPUT
        else
          # Try to auto-detect default branch
          BASE_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "main")
          echo "base-branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "Auto-detected base branch: $BASE_BRANCH"
        fi
      shell: bash

    - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: "3.14"

    - run: |
        echo "::group::Install tuf-on-ci"
        ROOT=$GITHUB_ACTION_PATH/../..
        pip install -c $ROOT/action-constraints.txt $ROOT/repo/
        echo "::endgroup::"
      shell: bash

    - id: update_targets
      run: |
        if tuf-on-ci-update-targets >> update-output;  then
          echo "targets_updated=true" >> $GITHUB_OUTPUT
        else
          echo "targets_updated=false" >> $GITHUB_OUTPUT
        fi
        cat update-output
        cat update-output >> output
        cat update-output >> "$GITHUB_STEP_SUMMARY"
      shell: bash

    - id: status
      if: steps.update_targets.outputs.targets_updated != 'true'
      run: |
        if tuf-on-ci-status >> status-output;  then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
        fi
        cat status-output
        cat status-output >> output
        cat status-output >> "$GITHUB_STEP_SUMMARY"
      shell: bash

    - id: update-pr
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        STATUS: ${{ steps.status.outputs.status }}
        BASE_BRANCH: ${{ steps.detect-base-branch.outputs.base-branch }}
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs')
          const title = `Signing event: ${process.env.GITHUB_REF_NAME}`
          const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha
          })
          const open_prs = prs.data.filter(item => item.state === 'open')

          if (open_prs.length > 1) {
            core.setFailed("Found more than one open pull request with the current commit")
          } else if (open_prs.length == 0) {
            const response = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: `Processing signing event ${process.env.GITHUB_REF_NAME}, please wait.`,
              draft: true,
              head: process.env.GITHUB_REF_NAME,
              base: process.env.BASE_BRANCH,
            })
            pr = response.data.number
            console.log(`Created pull request #${pr}`)
          } else {
            pr = open_prs[0].number
            console.log(`Found existing pull request #${pr}`)
          }

          message = fs.readFileSync('./output').toString()
          summary = "Signing event in progress"
          should_be_draft = true
          if (process.env.STATUS == 'success') {
            message += "### Signing event is successful\n\n"
            message += "Threshold of signatures has been reached: this signing event can be reviewed and merged."
            summary = "Signing event is successful"
            should_be_draft = false
          }

          // Pull request numbers are also valid issue numbers
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr,
            body: message,
          })

          // Following pile of GraphQL is here because draft state cannot
          // be modified through rest API at all!

          // First get the PR "Id" and current draft state...
          response = await github.graphql(`query {
            repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
              pullRequest(number: ${pr}) { id, isDraft }
            }
          }`)
          pr_id = response.repository.pullRequest.id
          is_draft = response.repository.pullRequest.isDraft
          // Then modify PR if needed
          if (should_be_draft && !is_draft) {
            await github.graphql(`mutation SetPullRequestDraft {
              convertPullRequestToDraft(input: {pullRequestId: "${pr_id}"}) {
                pullRequest { isDraft }
              }
            }`)
          } else if (!should_be_draft && is_draft) {
            await github.graphql(`mutation SetPullRequestReady {
              markPullRequestReadyForReview(input: {pullRequestId: "${pr_id}"}) {
                pullRequest { isDraft }
              }
            }`)
          }

          await core.summary.addHeading(summary).write()

    - name: Dispatch another signing event workflow
      # dispatch if using default token: otherwise update_targets step
      # has alreaddy triggered a push event
      if: inputs.token == github.token && steps.update_targets.outputs.targets_updated == 'true'
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        github-token: ${{ inputs.token }}
        script: |
          console.log('Dispatching another signing event workflow after a targets metadata update')
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'signing-event.yml',
            ref: process.env.GITHUB_REF_NAME,
          })
